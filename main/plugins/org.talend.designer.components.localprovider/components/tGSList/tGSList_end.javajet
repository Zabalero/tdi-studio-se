<%@ jet
imports="
	java.util.List
	org.talend.core.model.process.INode
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.process.ElementParameterParser
    java.util.Map
    "
%>
	<%
    CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    INode node = (INode)codeGenArgument.getArgument();
    String cid = node.getUniqueName();

    String useExistingConn = ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__");
    String dieOnError = ElementParameterParser.getValue(node, "__DIE_ON_ERROR__");
	boolean listInBucketList = "true".equals(ElementParameterParser.getValue(node,"__LIST_IN_BUCKET_LIST__"));
	boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));
	List<Map<String, String>> buckets = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__BUCKETS__");
	String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
	String authType = ElementParameterParser.getValue(node, "__AUTH_TYPE__");
    boolean useHMACAuthType = false;
    if(("true").equals(useExistingConn)) {
        List< ? extends INode> nodes =  node.getProcess().getNodesOfType("tGSConnection");
        for (INode ne : nodes) {
                if (connection.equals(ne.getUniqueName())) {
                        String authTypeInConnectionComponent = ElementParameterParser.getValue(ne, "__AUTH_TYPE__");
                        useHMACAuthType = "USER_ACCOUNT_HMAC".equals(authTypeInConnectionComponent);
                        break;
                }
        }
    } else {
        useHMACAuthType = "USER_ACCOUNT_HMAC".equals(authType);
    }

	if(!listInBucketList || buckets.size()>0){
	%>

		   		}
		    }
<%
	}


if (useHMACAuthType){
%>
	}catch(java.lang.Exception e_<%=cid%>){
<%
		if (("true").equals(dieOnError)) {
		%>
			throw(e_<%=cid%>);
<%
		} else {
%>
			if(e_<%=cid%> instanceof org.jets3t.service.ServiceException){
				org.jets3t.service.ServiceException servError_<%=cid%> = (org.jets3t.service.ServiceException)e_<%=cid%>;
				<%
				if(isLog4jEnabled){
				%>
					log.error("<%=cid%> - " + servError_<%=cid%>.getErrorCode());
				<%
				}
				%>
				System.err.println("Exception in component <%=cid%>:");
				System.err.println(servError_<%=cid%>.getMessage());
				if(servError_<%=cid%>.getErrorCode()!=null){
					<%
					if(isLog4jEnabled){
					%>
						log.error("<%=cid%> - " + servError_<%=cid%>.getErrorMessage());
					<%
					}
					%>
					System.err.println(servError_<%=cid%>.getErrorCode());
				}
				if(servError_<%=cid%>.getErrorMessage()!=null){
					<%
					if(isLog4jEnabled){
					%>
						log.error("<%=cid%> - " + e_<%=cid%>.getMessage());
					<%
					}
					%>
					System.err.println(servError_<%=cid%>.getErrorMessage());
				}

			}else{
				<%
				if(isLog4jEnabled){
				%>
					log.error("<%=cid%> - " + e_<%=cid%>.getMessage());
				<%
				}
				%>
				System.err.println(e_<%=cid%>.getMessage());
			}
<%
		}
		if(!("true").equals(useExistingConn)) {
%>
	}finally{
		if(service_<%=cid%> !=null){
			service_<%=cid%>.shutdown();
		}

<%
		}
%>
	}



<%
} else {
%>
//For service account
<%
}
%>

globalMap.put("<%=cid%>_NB_LINE", nb_line_<%=cid%>);



